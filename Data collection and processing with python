#part 1
import requests_with_caching
import json
def get_movies_from_tastedive(moviename):
    baseurl = "https://tastedive.com/api/similar"
    parameters = {"q": moviename, "type": "movies","limit": 5}
    resp = requests_with_caching.get(baseurl, params = parameters)
    print(resp.url)
    respDic = resp.json()
    return respDic
    
  
#part 2
import requests_with_caching
import json
def get_movies_from_tastedive(moviename):
    baseurl = "https://tastedive.com/api/similar"
    parameters = {"q": moviename, "type": "movies","limit": 5}
    resp = requests_with_caching.get(baseurl, params = parameters)
    print(resp.url)
    respDic = resp.json()
    return respDic
    
    
def extract_movie_titles(moviename):
    result = []
    for i in moviename['Similar']['Results']:
        result.append(i['Name'])
    return result
    
#part 3
import requests_with_caching
import json
def get_movies_from_tastedive(moviename):
    baseurl = "https://tastedive.com/api/similar"
    parameters = {"q": moviename, "type": "movies","limit": 5}
    resp = requests_with_caching.get(baseurl, params = parameters)
    print(resp.url)
    respDic = resp.json()
    return respDic
    
    
def extract_movie_titles(moviename):
    result = []
    for i in moviename['Similar']['Results']:
        result.append(i['Name'])
    return result

def get_related_titles(listmovname):
    if listmovname != []:
        auxList = []
        relatedlist = []
        for moviename in listmovname:
            auxList = extract_movie_titles(get_movies_from_tastedive(moviename))
            for movienameaux in auxList:
                if movienameaux not in relatedlist:
                    relatedlist.append(movienameaux)
                    
        return relatedlist
    return listmovname
#part 4
import requests_with_caching
import json
def get_movie_data(movieName, key = "Similar"):
    baseurl= "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"]= movieName
    params_d["apikey"]= key
    params_d["r"]= "json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDic = resp.json()
    return respDic
    
part 5
import requests_with_caching
import json
def get_movie_data(movieName, key = "Similar"):
    baseurl= "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"]= movieName
    params_d["r"]= "json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDic = resp.json()
    return respDic
def get_movie_rating(movieNameJson):
    strRanting=""
    for typeRantingList in movieNameJson["Ratings"]:
        if typeRantingList["Source"]== "Rotten Tomatoes":
            strRanting = typeRantingList["Value"]
    if strRanting != "":
        ranting = int(strRanting[:2])
    else: ranting = 0
    return ranting
    
#part 6
import requests_with_caching
import json
def get_movies_from_tastedive(moviename):
    baseurl = "https://tastedive.com/api/similar"
    parameters = {"q": moviename, "type": "movies","limit": 5}
    resp = requests_with_caching.get(baseurl, params = parameters)
    print(resp.url)
    respDic = resp.json()
    return respDic
    
    
def extract_movie_titles(moviename):
    result = []
    for i in moviename['Similar']['Results']:
        result.append(i['Name'])
    return result

def get_related_titles(listmovname):
    if listmovname != []:
        auxList = []
        relatedlist = []
        for moviename in listmovname:
            auxList = extract_movie_titles(get_movies_from_tastedive(moviename))
            for movienameaux in auxList:
                if movienameaux not in relatedlist:
                    relatedlist.append(movienameaux)
                    
        return relatedlist
    return listmovname
import requests_with_caching
import json
def get_movie_data(movieName, key = "Similar"):
    baseurl= "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"]= movieName
    params_d["r"]= "json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDic = resp.json()
    return respDic
def get_movie_rating(movieNameJson):
    strRanting=""
    for typeRantingList in movieNameJson["Ratings"]:
        if typeRantingList["Source"]== "Rotten Tomatoes":
            strRanting = typeRantingList["Value"]
    if strRanting != "":
        ranting = int(strRanting[:2])
    else: ranting = 0
    return ranting
def get_sorted_recommendations(listMovieTitle):
    listMovie= get_related_titles(listMovieTitle)
    listMovie= sorted(listMovie, key = lambda movieName: (get_movie_rating(get_movie_data(movieName)), movieName), reverse=True)
    
    return listMovie

